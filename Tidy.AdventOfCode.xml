<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tidy.AdventOfCode</name>
    </assembly>
    <members>
        <member name="T:Tidy.AdventOfCode.CachingApiHandler">
            <inheritdoc/>
        </member>
        <member name="P:Tidy.AdventOfCode.CachingApiHandler.Client">
            <summary>The client instance used for communicating with the https://adventofcode.com/ website.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.CachingApiHandler.ApiCacheManager">
            <summary>The API cache manager. Used to look up and store the inputs and results.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.CachingApiHandler.ParameterValidator">
            <summary>The parameter validator. Used to validate year, day and part values.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.CachingApiHandler.HtmlContentExtractor">
            <summary>The HTML content extractor. Used to extract the &lt;main&gt; tag's content from the full HTML from HTTP body.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.CachingApiHandler.#ctor(Tidy.AdventOfCode.IApiCookieAccessor,Tidy.AdventOfCode.IApiCacheManager,Tidy.AdventOfCode.IParameterValidator,Tidy.AdventOfCode.IHtmlContentExtractor)">
            <summary>Creates a caching API handler object.</summary>
            <param name="apiCookieAccessor">The cookie accessor object. Used to put the relevant request header to the <see cref="T:System.Net.Http.HttpClient"/> when constructing.</param>
            <param name="apiCacheManager">The API cache manager. Used to look up and store the inputs and results.</param>
            <param name="parameterValidator">The parameter validator. Used to validate year, day and part values.</param>
            <param name="htmlContentExtractor">The HTML content extractor. Used to extract the &lt;main&gt; tag's content from the full HTML from HTTP body.</param>
        </member>
        <member name="M:Tidy.AdventOfCode.CachingApiHandler.GetInputAsync(System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.CachingApiHandler.PostAnswerAsync(System.Int32,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Tidy.AdventOfCode.Day">
            <summary>Uses no parsing of the input value, simply provides the input string unmodified. See also <seealso cref="T:Tidy.AdventOfCode.Day`1"/>. Can also be used to access the nested class <see cref="T:Tidy.AdventOfCode.Day.NewLineSplitParsed`1"/> to use the default <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)"/> for a given type for automatic conversion from strings. You can and should create additional abstractions based on your needs from this class.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.Day.NewLineSplitParsed`1">
            <summary>Splits the input string along newlines ('\n') and uses <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)"/> for <typeparamref name="T"/> to convert using the <see cref="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)"/> method. See also <seealso cref="T:Tidy.AdventOfCode.Day`1"/>.</summary>
            <typeparam name="T">The type of the data items (as an array) used when processing the input, looking for the correct solution. If using the default <see cref="T:Tidy.AdventOfCode.Runner"/> and service configuration, the input is provided by the <see cref="M:Tidy.AdventOfCode.Day.NewLineSplitParsed`1.ParseInput(System.String)"/> method to the <see cref="P:Tidy.AdventOfCode.Day`1.Input"/> property to be used in one of the executor methods.</typeparam>
        </member>
        <member name="M:Tidy.AdventOfCode.Day.NewLineSplitParsed`1.ParseInput(System.String)">
            <summary>
            Parses the provided <paramref name="rawInput"/> by splitting along the newline ('\n') character, and projecting each line to a <typeparamref name="T"/> type by using the default <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="rawInput">The raw input value.</param>
            <returns>The parsed <typeparamref name="T"/> values as a generic array.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Day.ParseInput(System.String)">
            <summary>Returns the input string.</summary>
            <param name="rawInput">The input to return.</param>
            <returns>The <paramref name="rawInput"/> unmodified.</returns>
        </member>
        <member name="T:Tidy.AdventOfCode.Day`1">
            <summary>The base convenience class to inherit from when creating solutions for Advent of Code riddles.<br/>
            Note that this class contains an additional convenience nested class for reusable parsing of the input value: <see cref="T:Tidy.AdventOfCode.Day`1.WithParser`1"/>, with which you can use custom (reusable) <see cref="T:Tidy.AdventOfCode.IParser`1"/> implementations.
            You can and should create additional abstractions based on your needs from this class.</summary>
            <typeparam name="T">The type of the data used when processing the input, looking for the correct solution. If using the default <see cref="T:Tidy.AdventOfCode.Runner"/> and service configuration, then the input is provided by the <see cref="M:Tidy.AdventOfCode.Day`1.ParseInput(System.String)"/> method to the <see cref="P:Tidy.AdventOfCode.Day`1.Input"/> property to be used in one of the executor methods.</typeparam>
        </member>
        <member name="T:Tidy.AdventOfCode.Day`1.WithParser`1">
            <summary>Creates an instance of <typeparamref name="T"/> for processing, by constructing an <typeparamref name="TParser"/> instance. See also <seealso cref="T:Tidy.AdventOfCode.Day`1"/>.</summary>
            <typeparam name="TParser">The <see cref="T:Tidy.AdventOfCode.IParser`1"/> type to be used for constructing the <typeparamref name="T"/> instance.</typeparam>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.WithParser`1.ParseInput(System.String)">
            <summary>Creates an instance of <typeparamref name="T"/> for processing, by constructing an <typeparamref name="TParser"/> instance and calling <see cref="M:Tidy.AdventOfCode.IParser`1.Parse(System.String)"/>.</summary>
            <param name="rawInput">The raw input value.</param>
            <returns>The parsed <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="P:Tidy.AdventOfCode.Day`1.Input">
            <summary>The input value. Generally provided by a <see cref="T:Tidy.AdventOfCode.Runner"/> by calling this instance's <see cref="M:Tidy.AdventOfCode.Day`1.ParseInput(System.String)"/> method.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.ExecuteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes the given part. Calls either <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart1Async(System.Threading.CancellationToken)"/> or <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart2Async(System.Threading.CancellationToken)"/> and returns the result (or faults).
            </summary>
            <param name="part">The part to be used. Should be either 1 or 2.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result from the part-specific execution method (<see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart1Async(System.Threading.CancellationToken)"/> or <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart2Async(System.Threading.CancellationToken)"/>);</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.ParseInput(System.String)">
            <inheritdoc cref="M:Tidy.AdventOfCode.IDay.ParseInput(System.String)"/>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.ExecutePart1">
            <summary>Executes part 1 of the solution. By default, <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart1Async(System.Threading.CancellationToken)"/> calls this method, and this throws a <see cref="T:System.NotImplementedException"/> and either this or <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart1Async(System.Threading.CancellationToken)"/> should be overridden.</summary>
            <returns>The answer to part 1 of the riddle, as computed.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.ExecutePart2">
            <summary>Executes part 2 of the solution. By default, <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart2Async(System.Threading.CancellationToken)"/> calls this method, and this throws a <see cref="T:System.NotImplementedException"/> and either this or <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart2Async(System.Threading.CancellationToken)"/> should be overridden.</summary>
            <returns>The answer to part 2 of the riddle, as computed.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.ExecutePart1Async(System.Threading.CancellationToken)">
            <summary>Asynchronously executes part 1 of the solution. By default, this method calls <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart1"/>, which throws a <see cref="T:System.NotImplementedException"/> and either this or <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart1"/> should be overridden.</summary>
            <returns>The answer to part 1 of the riddle, as computed asynchronously.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.ExecutePart2Async(System.Threading.CancellationToken)">
            <summary>Asynchronously executes part 2 of the solution. By default, this method calls <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart2"/>, which throws a <see cref="T:System.NotImplementedException"/> and either this or <see cref="M:Tidy.AdventOfCode.Day`1.ExecutePart1"/> should be overridden.</summary>
            <returns>The answer to part 1 of the riddle, as computed asynchronously.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Day`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Tidy.AdventOfCode.DayAttribute">
            <summary>Used to annotate a non-conventionally named <see cref="T:Tidy.AdventOfCode.Day`1"/> object with the corresponding year and day values, or ignore a <see cref="T:Tidy.AdventOfCode.Day`1"/> subclass from being resolved by an <see cref="T:Tidy.AdventOfCode.IDayResolver"/>. By convention, <see cref="T:Tidy.AdventOfCode.Day`1"/> objects should be named Day# or Day##, where # and ## represents the day number, and be placed in a namespace which has a last segment of Year####, where #### corresponds to the relevant year.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.DayAttribute.#ctor(System.Int32,System.Int32)">
            <summary>Annotate a <see cref="T:Tidy.AdventOfCode.Day`1"/> type with the given <paramref name="year"/> and <paramref name="dayNumber"/> values when not conventionally named.</summary>
            <param name="year">The relevant year for the <see cref="T:Tidy.AdventOfCode.Day`1"/> type.</param>
            <param name="dayNumber">The relevant day for the <see cref="T:Tidy.AdventOfCode.Day`1"/> type.</param>
        </member>
        <member name="P:Tidy.AdventOfCode.DayAttribute.Year">
            <summary>The year number that the <see cref="T:Tidy.AdventOfCode.Day`1"/> belongs to.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DayAttribute.DayNumber">
            <summary>The day number that the <see cref="T:Tidy.AdventOfCode.Day`1"/> belongs to.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DayAttribute.Ignore">
            <summary>Indicates whether to ignore the <see cref="T:Tidy.AdventOfCode.Day`1"/> type from being included in automatic resolution from an <see cref="T:Tidy.AdventOfCode.IDayResolver"/>.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.DayResolver">
            <summary>Responsible for creating <see cref="T:Tidy.AdventOfCode.IDay"/> objects. This resolver uses the provided <see cref="T:System.IServiceProvider"/> for constructing the <see cref="T:Tidy.AdventOfCode.IDay"/> instances by providing services to the <see cref="T:Tidy.AdventOfCode.IDay"/>'s (single, public) constructor.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DayResolver.DayConstructors">
            <summary>The constructor instances stored for each year-day pair.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.DayResolver.#ctor(Tidy.AdventOfCode.IParameterValidator,System.IServiceProvider,System.Reflection.Assembly[])">
            <summary>Create a resolver object for constructing <see cref="T:Tidy.AdventOfCode.Day`1"/> instances using dependency injection.</summary>
            <param name="parameterValidator">The validator used to validate year and day values.</param>
            <param name="serviceProvider">The service provider used to provide required services for the <see cref="T:Tidy.AdventOfCode.IDay"/> constructors.</param>
            <param name="additionalAssemblies">The assemblies to be scanned (in addition to the entry assembly) for <see cref="T:Tidy.AdventOfCode.IDay"/> implementations.</param>
        </member>
        <member name="P:Tidy.AdventOfCode.DayResolver.ParameterValidator">
            <summary>The validator used to validate year and day values.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DayResolver.ServiceProvider">
            <summary>The service provider used to provide required services for the <see cref="T:Tidy.AdventOfCode.Day`1"/> constructors.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.DayResolver.CreateDay(System.Int32,System.Int32)">
            <summary>Create a <see cref="T:Tidy.AdventOfCode.IDay"/> implementation for a given <paramref name="year"/>-<paramref name="day"/> pair by using the registered implementation's single public constructor for dependency injection from the <see cref="P:Tidy.AdventOfCode.DayResolver.ServiceProvider"/> instance.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.DirectoryCacheManager">
            <summary>A cache manager object that stores the cookie, the riddle inputs and responses as file entries in the provided directory.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.#ctor(Tidy.AdventOfCode.IDirectoryCacheManagerPathProvider,Tidy.AdventOfCode.IParameterValidator,Tidy.AdventOfCode.IParameterParser)">
            <summary>Create a directory-based cache manager.</summary>
            <param name="directoryCacheManagerPathProvider">The provider used to acquire the base cache directory path.</param>
            <param name="parameterValidator">The validator used to validate year, day and part values.</param>
            <param name="parameterParser">The parser used to materialize the cached string parameters as int values.</param>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManager.CookieValue">
            <summary>Gets or sets the stored cookie value. The cookie should contain the cookie value for the key 'session', and should be placed in the directory provided by the <see cref="P:Tidy.AdventOfCode.DirectoryCacheManager.DirectoryCacheManagerPathProvider"/> instance named 'cookie.txt'. Consequent calls return a cached value, but setting the value updates the cache and stores the value in the text file.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManager.Directory">
            <summary>Get the base directory used for caching.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManager.InputsDirectory">
            <summary>Get the base directory used for caching input values.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManager.OutputsDirectory">
            <summary>Get the base directory used for caching output values.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManager.DirectoryCacheManagerPathProvider">
            <summary>The provider used to acquire the base cache directory path.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManager.ParameterValidator">
            <summary>The validator used to validate year, day and part values.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManager.ParameterParser">
            <summary>The parser used to materialize the cached string parameters as int values.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.TryReadValue(System.IO.FileInfo,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.WriteInputAsync(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.TryGetInputValue(System.Int32,System.Int32,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.GetInputValue(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.WriteAnswerAsync(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.TryGetResponseForAnswer(System.Int32,System.Int32,System.Int32,System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.GetStableHash(System.String)">
            <summary>Calculates a simple, repeatable hash for the given <paramref name="text"/> (an answer) that is used as part of naming the cached file entries. If the <paramref name="text"/> can be parsed as a <see cref="T:System.Int64"/>, the number value is used. If the <paramref name="text"/> is not longer than 10 characters long, the string value itself is used. Otherwise, a default <see cref="T:System.Security.Cryptography.MD5"/> hash is calculated using <see cref="P:System.Text.Encoding.UTF8"/>, of which the first 10 characters are used.</summary>
            <param name="text">The text to calculate the simple hash for.</param>
            <returns>The repeatable hash for the input <paramref name="text"/>.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.TryGetLastParameters(System.Nullable{System.ValueTuple{System.Int32,System.Int32,System.Int32}}@)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManager.WriteLastParametersAsync(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Tidy.AdventOfCode.DirectoryCacheManagerPathProvider">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.DirectoryCacheManagerPathProvider.#ctor(System.String)">
            <summary>Create a simple provider that returns the provided path in the <see cref="P:Tidy.AdventOfCode.DirectoryCacheManagerPathProvider.Path"/> property.</summary>
            <param name="path">The path value to provide.</param>
        </member>
        <member name="P:Tidy.AdventOfCode.DirectoryCacheManagerPathProvider.Path">
            <summary>The path value. Doesn't mutate once the provider is instantiated.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.HtmlAgilityPackContentExtractor">
            <summary>An <see cref="T:Tidy.AdventOfCode.IHtmlContentExtractor"/> that uses <see cref="N:HtmlAgilityPack"/> for extracting the &lt;main&gt; tag's value from provided HTML content.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.HtmlAgilityPackContentExtractor.Extract(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Tidy.AdventOfCode.IApiCacheManager">
            <summary>Represents an object responsible for storing and retrieving riddle inputs and corresponding responses for caching purposes.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.IApiCacheManager.TryGetInputValue(System.Int32,System.Int32,System.String@)">
            <summary>Gets the <paramref name="input"/> value for the corresponding <paramref name="year"/> and <paramref name="day"/> if available.</summary>
            <param name="year">The corresponding year.</param>
            <param name="day">The corresponding day.</param>
            <param name="input">The input, if available. Not null if found.</param>
            <returns>True if the <paramref name="input"/> was found.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.IApiCacheManager.GetInputValue(System.Int32,System.Int32)">
            <summary>Gets the input value for the corresponding <paramref name="year"/> and <paramref name="day"/>, or throws an exception if not found.</summary>
            <param name="year">The corresponding year.</param>
            <param name="day">The corresponding day.</param>
            <returns>The plain text input value as found in the cache.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.IApiCacheManager.TryGetResponseForAnswer(System.Int32,System.Int32,System.Int32,System.String,System.String@)">
            <summary>Gets the <paramref name="htmlResponse"/> value for the corresponding <paramref name="year"/>, <paramref name="day"/>, <paramref name="part"/> and <paramref name="answer"/>, if available.</summary>
            <param name="year">The corresponding year.</param>
            <param name="day">The corresponding day.</param>
            <param name="part">The corresponding part.</param>
            <param name="answer">The provided answer.</param>
            <param name="htmlResponse">The HTML response, if available. Not null if found.</param>
            <returns>True if the <paramref name="htmlResponse"/> was found.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.IApiCacheManager.WriteAnswerAsync(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Store the <paramref name="answer"/> and corresponding <paramref name="htmlResponse"/> in the cache.</summary>
            <param name="year">The corresponding year.</param>
            <param name="day">The corresponding day.</param>
            <param name="part">The corresponding part.</param>
            <param name="answer">The provided answer.</param>
            <param name="htmlResponse">The response, as recieved from the server.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the write operations finished successfully.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.IApiCacheManager.WriteInputAsync(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>Store the provided <paramref name="input"/> in the cache.</summary>
            <param name="year">The corresponding year.</param>
            <param name="day">The corresponding day.</param>
            <param name="input">The input corresponding to the year and day (for the given user).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the write operation finished successfully.</returns>
        </member>
        <member name="T:Tidy.AdventOfCode.IApiCookieAccessor">
            <summary>Used to retrieve or store the value for the 'session' cookie used on the https://adventofcode.com/ website.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.IApiCookieAccessor.CookieValue">
            <summary>The value for the cookie named 'session'.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.ICachedContentManager">
            <summary>Manages non-critical cached content, like the last used year-day-part combination.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.ICachedContentManager.TryGetLastParameters(System.Nullable{System.ValueTuple{System.Int32,System.Int32,System.Int32}}@)">
            <summary>Tries to get the parameters used when last run, if available.</summary>
            <param name="parameters">The year, dayNumber and part values, as stored (if available).</param>
            <returns>True if the parameters were found in the cache.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.ICachedContentManager.WriteLastParametersAsync(System.Int32,System.Int32,System.Int32)">
            <summary>Saves the provided parameters to the cache. Validation is used before storing the values.</summary>
            <param name="year">The year value to store.</param>
            <param name="dayNumber">The day number value to store.</param>
            <param name="part">The part value to store.</param>
            <returns>A task that completes when the cache write operation finishes.</returns>
        </member>
        <member name="T:Tidy.AdventOfCode.ICachingApiHandler">
            <summary>
            A handler responsible for getting the inputs from and posting the answers to https://adventofcode.com/ using the user's session cookie.
            Note that this handler uses local caching of the inputs and answers/results.
            </summary>
        </member>
        <member name="M:Tidy.AdventOfCode.ICachingApiHandler.GetInputAsync(System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the input string value for the given <paramref name="year"/> and <paramref name="day"/> from the server (unless ignored by <paramref name="useCacheOnly"/>). Note that input does not vary between the two parts of a riddle. If the input was already obtained (or <paramref name="useCacheOnly"/> is true), it will be returned from local file cache.
            </summary>
            <param name="year">The relevant year.</param>
            <param name="day">The relevant day.</param>
            <param name="useCacheOnly">Whether to use the local cache to look for the input only, and not the server.</param>
            <param name="cancellationToken">The token used for cancelling asynchronous requests.</param>
            <returns>The input given for the <paramref name="year"/> and <paramref name="day"/>.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.ICachingApiHandler.PostAnswerAsync(System.Int32,System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the result of a given answer to a riddle from the server. If the same answer was already posted, the result will be returned from local file cache. Note that this might interfere with correctly solving a riddle when multiple answers were posted in a short amount of time as AoC allows only one try per minute. In this case the warning result will be cached, and the cache might need to be cleared manually.
            </summary>
            <param name="year">The relevant year.</param>
            <param name="day">The relevant day.</param>
            <param name="part">The relevant part.</param>
            <param name="answer">The answer, which is normally provided on the UI in an input box.</param>
            <param name="cancellationToken">The token used for cancelling asynchronous requests.</param>
            <returns>The response HTML's content of the &lt;main&gt; tag.</returns>
        </member>
        <member name="T:Tidy.AdventOfCode.IDay">
            <summary>Represents a riddle solution in the Advent of Code calendar.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.IDay.ExecuteAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes the riddle solution and returns whatever result is materialized.
            </summary>
            <param name="part">The part to execute (1 or 2).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The materialized result that should be posted on the website's input field.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.IDay.ParseInput(System.String)">
            <summary>
            Parses the provided input value to something that can be understood by the riddle's solution.
            </summary>
            <param name="rawInput">The raw input to be provided to the riddle.</param>
            <returns>The parsed input value.</returns>
        </member>
        <member name="P:Tidy.AdventOfCode.IDay.Input">
            <summary>The parsed input value.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.IDayResolver">
            <summary>Responsible for creating <see cref="T:Tidy.AdventOfCode.IDay"/> instances.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.IDayResolver.CreateDay(System.Int32,System.Int32)">
            <summary>Create a day object for a given <paramref name="year"/>-<paramref name="day"/> pair.</summary>
            <param name="year">The year the <see cref="T:Tidy.AdventOfCode.IDay"/> instance corresponds to.</param>
            <param name="day">The day the <see cref="T:Tidy.AdventOfCode.IDay"/> instance corresponds to.</param>
            <returns>The constructed <see cref="T:Tidy.AdventOfCode.IDay"/> instance.</returns>
        </member>
        <member name="T:Tidy.AdventOfCode.IDirectoryCacheManagerPathProvider">
            <summary>The provider used to acquire the base cache directory path.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.IDirectoryCacheManagerPathProvider.Path">
            <summary>The consumed property.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.IHtmlContentExtractor">
            <summary>An extractor that is able to extract the &lt;main&gt; tag from the provided HTML content.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.IHtmlContentExtractor.Extract(System.String)">
            <summary>Extracts the &lt;main&gt; tag from the provided HTML content.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.IParameterParser">
            <summary>A simple string parser, which can parse a string value to a year-dayNumber(-part) tuple.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterParser.TryParseFull(System.String,System.Nullable{System.ValueTuple{System.Int32,System.Int32,System.Int32}}@)">
            <summary>Tries parsing the provided text to a year-dayNumber-part tuple.</summary>
            <param name="text">The text to parse.</param>
            <param name="parameters">The parsed values, if parsing was successful.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterParser.TryParse(System.String,System.Nullable{System.ValueTuple{System.Int32,System.Int32}}@)">
            <summary>Tries parsing the provided text to a year-dayNumber tuple.</summary>
            <param name="text">The text to parse.</param>
            <param name="parameters">The parsed values, if parsing was successful.</param>
            <returns>True if parsing was successful.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterParser.ParseFull(System.String)">
            <summary>Parses the provided text to a year-dayNumber-part tuple, or throws an <see cref="T:System.ArgumentException"/>.</summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed values</returns>
            <exception cref="T:System.ArgumentException">The provided <paramref name="text"/> was not in the correct format.</exception>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterParser.Parse(System.String)">
            <summary>Parses the provided text to a year-dayNumber tuple, or throws an <see cref="T:System.ArgumentException"/>.</summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed values</returns>
            <exception cref="T:System.ArgumentException">The provided <paramref name="text"/> was not in the correct format.</exception>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterParser.Convert(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>Converts the provided parameters to the format readable by this parser. The values are validated using the <see cref="M:Tidy.AdventOfCode.IParameterParser.TryParse(System.String,System.Nullable{System.ValueTuple{System.Int32,System.Int32}}@)"/> or <see cref="M:Tidy.AdventOfCode.IParameterParser.TryParseFull(System.String,System.Nullable{System.ValueTuple{System.Int32,System.Int32,System.Int32}}@)"/> method.</summary>
            <param name="year">The year value.</param>
            <param name="dayNumber">The day number value.</param>
            <param name="part">The (optional) part value.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="P:Tidy.AdventOfCode.IParameterParser.ShortFormatString">
            <summary>Gets the short format string.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.IParameterParser.LongFormatString">
            <summary>Gets the long format string.</summary>
        </member>
        <member name="T:Tidy.AdventOfCode.IParameterValidator">
            <summary>Validates year, day and part values.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterValidator.Validate(System.Int32,System.Int32)">
            <summary>Validates a <paramref name="year"/>-<paramref name="day"/> pair. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if not valid.</summary>
            <param name="year">The year value. Should be at least 2015, and shouldn't be larger than the current year.</param>
            <param name="day">The day value. Should be between 1 and 25, but the <paramref name="year"/>-day pair should point to a day that is not in the future.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameters are out of the defined range.</exception>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterValidator.Validate(System.Int32,System.Int32,System.Int32)">
            <summary>Validates a <paramref name="year"/>-<paramref name="day"/> pair and a <paramref name="part"/> value. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if not valid.</summary>
            <param name="year">The year value. Should be at least 2015, and shouldn't be larger than the current year.</param>
            <param name="day">The day value. Should be between 1 and 25, but the <paramref name="year"/>-day pair should point to a day that is not in the future.</param>
            <param name="part">Should be either 1 or 2.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameters are out of the defined range.</exception>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterValidator.IsValid(System.Int32,System.Int32)">
            <summary>Validates a <paramref name="year"/>-<paramref name="day"/> pair.</summary>
            <param name="year">The year value. Should be at least 2015, and shouldn't be larger than the current year.</param>
            <param name="day">The day value. Should be between 1 and 25, but the <paramref name="year"/>-day pair should point to a day that is not in the future.</param>
        </member>
        <member name="M:Tidy.AdventOfCode.IParameterValidator.IsValid(System.Int32,System.Int32,System.Int32)">
            <summary>Validates a <paramref name="year"/>-<paramref name="day"/> pair and a <paramref name="part"/> value.</summary>
            <param name="year">The year value. Should be at least 2015, and shouldn't be larger than the current year.</param>
            <param name="day">The day value. Should be between 1 and 25, but the <paramref name="year"/>-day pair should point to a day that is not in the future.</param>
            <param name="part">Should be either 1 or 2.</param>
        </member>
        <member name="T:Tidy.AdventOfCode.IParser`1">
            <summary>Represents a parser that can be reused as providing an instance of the type <typeparamref name="T"/> from the raw input.</summary>
            <typeparam name="T">The instance that should be constructed from the provided input.</typeparam>
        </member>
        <member name="M:Tidy.AdventOfCode.IParser`1.Parse(System.String)">
            <summary>Parses/transforms the provided <paramref name="rawInput"/> input to a <typeparamref name="T"/> instance.</summary>
            <param name="rawInput">The input to be used for parsing. Generally the input can be obtained from the website after logging in, or the input can be mocked to provide the same input as if the provided examples in the riddle were given to the user as input.</param>
            <returns>The constructed <typeparamref name="T"/> value.</returns>
        </member>
        <member name="T:Tidy.AdventOfCode.ParameterParser">
            <summary>Parses strings in the YYYY-D, YYYY-DD, YYYY-D-P and YYYY-DD-P formats to year-dayNumber(-part) values. The values are not validated.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterParser.#ctor(Tidy.AdventOfCode.IParameterValidator)">
            <summary>Create a parameter parser for simple parsing of parameters.</summary>
            <param name="parameterValidator">The validator used to only parse/resolve correct values.</param>
        </member>
        <member name="P:Tidy.AdventOfCode.ParameterParser.ShortFormatString">
            <inheritdoc/>
        </member>
        <member name="P:Tidy.AdventOfCode.ParameterParser.LongFormatString">
            <inheritdoc/>
        </member>
        <member name="P:Tidy.AdventOfCode.ParameterParser.ParameterValidator">
            <summary>The validator used to only parse/resolve correct values.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterParser.Convert(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterParser.Parse(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterParser.ParseFull(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterParser.TryParse(System.String,System.Nullable{System.ValueTuple{System.Int32,System.Int32}}@)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterParser.TryParseFull(System.String,System.Nullable{System.ValueTuple{System.Int32,System.Int32,System.Int32}}@)">
            <inheritdoc/>
        </member>
        <member name="T:Tidy.AdventOfCode.ParameterValidator">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterValidator.IsValid(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterValidator.IsValid(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterValidator.Validate(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tidy.AdventOfCode.ParameterValidator.Validate(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Tidy.AdventOfCode.Runner">
            <summary>The default runner for executing potential solutions for Advent of Code riddles. By default, uses caching of input, answer and response values and directly calls the server at the https://adventofcode.com/ website to get the inputs and post the answers to the riddles.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.#ctor(Tidy.AdventOfCode.IDayResolver,Tidy.AdventOfCode.ICachingApiHandler,Microsoft.Extensions.Logging.ILogger{Tidy.AdventOfCode.Runner},Microsoft.Extensions.Options.IOptions{Tidy.AdventOfCode.RunnerOptions},Tidy.AdventOfCode.IParameterValidator,Tidy.AdventOfCode.ICachedContentManager,Tidy.AdventOfCode.IParameterParser)">
            <summary>Creates a runner to execute <see cref="T:Tidy.AdventOfCode.IDay"/> instances' <see cref="M:Tidy.AdventOfCode.IDay.ExecuteAsync(System.Int32,System.Threading.CancellationToken)"/> methods, provide and parse the inputs, post the answers and log and store the result.</summary>
            <param name="dayResolver">The resolver used to create <see cref="T:Tidy.AdventOfCode.IDay"/> instances.</param>
            <param name="cachingApiHandler">The handler used to communicate with the server.</param>
            <param name="logger">The logger used for logging.</param>
            <param name="options">The options object used for configuring different aspects of the runner.</param>
            <param name="parameterValidator">The validator used to validate yearday and part values.</param>
            <param name="cachedContentManager">Used for caching the execution parameters (year, dayNumber and part values).</param>
            <param name="parameterParser">The parser used to get the valid format of the parsable year-dayNumber-part strings.</param>
        </member>
        <member name="P:Tidy.AdventOfCode.Runner.DayResolver">
            <summary>The resolver used to create <see cref="T:Tidy.AdventOfCode.IDay"/> instances.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.Runner.CachingApiHandler">
            <summary>The handler used to communicate with the server.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.Runner.Logger">
            <summary>The logger used for logging.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.Runner.Options">
            <summary>Options for configuring different aspects of the <see cref="T:Tidy.AdventOfCode.Runner"/>.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.Runner.ParameterValidator">
            <summary>The validator used to validate yearday and part values.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.Runner.CachedContentManager">
            <summary>Used for caching the execution parameters (year, dayNumber and part values).</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.Runner.ParameterParser">
            <summary>The parser used to get the valid format of the parsable year-dayNumber-part strings.</summary>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.CreateDefault(System.String,System.Action{Tidy.AdventOfCode.RunnerOptions},System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Reflection.Assembly[])">
            <summary>
            Creates a default <see cref="T:Tidy.AdventOfCode.Runner"/> by creating a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceProvider"/> instance by configuring the <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTidyAdventOfCode(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Tidy.AdventOfCode.RunnerOptions},System.Reflection.Assembly[])"/> extension with the supplied parameters and retrieving the <see cref="T:Tidy.AdventOfCode.Runner"/> instance from the provider.
            </summary>
            <param name="cacheDirectoryPath">This parameter is passed to the <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTidyAdventOfCode(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Tidy.AdventOfCode.RunnerOptions},System.Reflection.Assembly[])"/> method. If null, on Windows, a directory named Tidy.AdventOfCode is created in the user's AppData folder (as provided by the APPDATA environment variable). If null, but not on Windows, an <see cref="T:System.ArgumentNullException"/> is thrown.</param>
            <param name="configureOptions">An action used to configure different aspects of the <see cref="T:Tidy.AdventOfCode.Runner"/>.</param>
            <param name="configureServices">An optional call to augment the created <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance with custom services or overrides.</param>
            <param name="additionalSolutionAssemblies">This parameter is passed to the <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTidyAdventOfCode(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Tidy.AdventOfCode.RunnerOptions},System.Reflection.Assembly[])"/> method.</param>
            <returns>The <see cref="T:Tidy.AdventOfCode.Runner"/> instance from the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceProvider"/>.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.GetParametersFromConsole">
            <summary>Gets the parameters (year, day number and part) from the Console standard input. The default is the cached value. This method loops until a correctly formatted parameter tuple is returned.</summary>
            <returns>The values provided by the user.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.ExecuteAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Executes the solution found in <see cref="T:Tidy.AdventOfCode.IDay"/> for <paramref name="year"/>, <paramref name="dayNumber"/> and <paramref name="part"/>. By default, a run consist of the following:<br/>
            - creating an <see cref="T:Tidy.AdventOfCode.IDay"/> using <see cref="M:Tidy.AdventOfCode.DayResolver.CreateDay(System.Int32,System.Int32)"/>,<br/>
            - getting the input value for the riddle (either from the server or API),<br/>
            - parse the input using the <see cref="M:Tidy.AdventOfCode.IDay.ParseInput(System.String)"/> method and store the result in the <see cref="P:Tidy.AdventOfCode.IDay.Input"/> property,<br/>
            - execute the <see cref="M:Tidy.AdventOfCode.IDay.ExecuteAsync(System.Int32,System.Threading.CancellationToken)"/> method to get the answer to the riddle,<br/>
            - post the answer to the server or retrieve it from cache (if it was already posted).<br/>
            At all points, the method logs useful information (running times, the answer, the result) to the <see cref="P:Tidy.AdventOfCode.Runner.Logger"/>.
            </summary>
            <param name="year">The riddle's corresponding year (between 2015 and the current year).</param>
            <param name="dayNumber">The riddle's corresponding day number (between 1 and 25).</param>
            <param name="part">The riddle's corresponding part (1 or 2).</param>
            <param name="cancellationToken">The cancellation token to cancel any pending operations in case a cancellation (e.g. application exit) is requested.</param>
            <returns>The result of posting the answer to the server, or the answer if posting is disabled.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>Convenience method to execute the solution found in <see cref="T:Tidy.AdventOfCode.IDay"/> for the year, day number and part provided by the user via <see cref="T:System.Console"/>. Uses <see cref="M:Tidy.AdventOfCode.Runner.GetParametersFromConsole"/> and <see cref="M:Tidy.AdventOfCode.Runner.ExecuteAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)"/>. See those methods for further information.</summary>
            <param name="cancellationToken">The cancellation token to cancel any pending operations in case a cancellation (e.g. application exit) is requested.</param>
            <returns>The result of posting the answer to the server, or the answer if posting is disabled.</returns>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.MultipleWhitespace">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match a whitespace character atomically at least twice.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.CorrectAnswer">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match the string "That's the right answer!".<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.IncorrectAnswer">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match the string "That's not the right answer".<br/>
                ○ 2nd capture group.<br/>
                    ○ Match a character other than '\n' greedily any number of times.<br/>
                ○ Match '.'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Tidy.AdventOfCode.Runner.GoldStar">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match the string "gold star".<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Tidy.AdventOfCode.RunnerOptions">
            <summary>The options object used to configure different aspects of the default <see cref="T:Tidy.AdventOfCode.Runner"/>.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.RunnerOptions.DisableAutomaticInputDownload">
            <summary>If set to true, the download (and caching) of the user's input will be disabled. Default value is false.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.RunnerOptions.DisableAutomaticAnswerUpload">
            <summary>If set to true, the upload (and caching) of the user's answers and the caching of recieved responses will be disabled. Default value is false.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.RunnerOptions.CopyAnswerToClipboard">
            <summary>If set to true, the answer value will be copied to the clipboard after a successful run (only on Windows). Default is false.</summary>
        </member>
        <member name="P:Tidy.AdventOfCode.RunnerOptions.ColorizeResponses">
            <summary>If set to true or unset, the answer will be colorized with console virtual terminal sequences. Some terminals might not support outputting the sequences and the commands might be visible instead of the colorization.</summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>An extension to register the default implementations to a given <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddTidyAdventOfCode(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Tidy.AdventOfCode.RunnerOptions},System.Reflection.Assembly[])">
            <summary>An extension to register the default implementations to a given <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.<br/>
            The following steps are taken:<br/>
            - console logging is added,<br/>
            - configures the <see cref="T:Tidy.AdventOfCode.RunnerOptions"/> using the provided <paramref name="configureOptions"/> (if available),<br/>
            - the <see cref="T:Tidy.AdventOfCode.ParameterValidator"/> is registered an an <see cref="T:Tidy.AdventOfCode.IParameterValidator"/>,<br/>
            - the <see cref="T:Tidy.AdventOfCode.ParameterParser"/> is registered an an <see cref="T:Tidy.AdventOfCode.IParameterParser"/>,<br/>
            - the <see cref="T:Tidy.AdventOfCode.DayResolver"/> is registered as an <see cref="T:Tidy.AdventOfCode.IDayResolver"/>, using the provided <paramref name="additionalSolutionAssemblies"/>,<br/>
            - the <see cref="T:Tidy.AdventOfCode.HtmlAgilityPackContentExtractor"/> is registered as an <see cref="T:Tidy.AdventOfCode.IHtmlContentExtractor"/>,<br/>
            - the given <paramref name="cacheDirectoryPath"/> is used to register a <see cref="T:Tidy.AdventOfCode.DirectoryCacheManagerPathProvider"/> as an <see cref="T:Tidy.AdventOfCode.IDirectoryCacheManagerPathProvider"/>,<br/>
            - the <see cref="T:Tidy.AdventOfCode.CachingApiHandler"/> is registered as an <see cref="T:Tidy.AdventOfCode.ICachingApiHandler"/>,<br/>
            - the <see cref="T:Tidy.AdventOfCode.DirectoryCacheManager"/> is registered for resolving for <see cref="T:Tidy.AdventOfCode.IApiCacheManager"/>, <see cref="T:Tidy.AdventOfCode.IApiCookieAccessor"/> and <see cref="T:Tidy.AdventOfCode.ICachedContentManager"/>,<br/>
            - a <see cref="T:Tidy.AdventOfCode.Runner"/> instance (as itself).<br/>
            All instances are registered for <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/> lifetimes.<br/>
            Any and all implementations can be switched out by registering the relevant service type after calling this method.<br/>
            Technically <see cref="T:Tidy.AdventOfCode.IApiCookieAccessor"/> and <see cref="T:Tidy.AdventOfCode.ICachedContentManager"/> are <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient"/>, as these, by default, resolve to the <see cref="T:Tidy.AdventOfCode.IApiCacheManager"/> instance, which is <see cref="T:Tidy.AdventOfCode.DirectoryCacheManager"/>. If both <see cref="P:Tidy.AdventOfCode.RunnerOptions.DisableAutomaticAnswerUpload"/> and <see cref="P:Tidy.AdventOfCode.RunnerOptions.DisableAutomaticInputDownload"/> are true, an empty cookie accessor instance is provided instead for <see cref="T:Tidy.AdventOfCode.IApiCookieAccessor"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to populate with <see cref="N:Tidy.AdventOfCode"/> services.</param>
            <param name="cacheDirectoryPath">The directory path used for caching the cookie, inputs, answers and responses.</param>
            <param name="configureOptions">An action used to configure different aspects of the <see cref="T:Tidy.AdventOfCode.Runner"/>.</param>
            <param name="additionalSolutionAssemblies">The assemblies to scan when looking for <see cref="T:Tidy.AdventOfCode.IDay"/> implementations beside the entry assembly.</param>
            <returns>The <paramref name="services"/> collection for chaining.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MultipleWhitespace_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MultipleWhitespace method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MultipleWhitespace_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CorrectAnswer_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the CorrectAnswer method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.CorrectAnswer_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CorrectAnswer_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CorrectAnswer_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CorrectAnswer_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.CorrectAnswer_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CorrectAnswer_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CorrectAnswer_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.CorrectAnswer_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IncorrectAnswer_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IncorrectAnswer method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IncorrectAnswer_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GoldStar_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GoldStar method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GoldStar_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GoldStar_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GoldStar_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GoldStar_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GoldStar_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GoldStar_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GoldStar_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GoldStar_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
